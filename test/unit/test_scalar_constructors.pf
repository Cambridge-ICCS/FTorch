!| Unit tests for FTorch subroutines that construct scalars.
!
!  * License
!    FTorch is released under an MIT license.
!    See the [LICENSE](https://github.com/Cambridge-ICCS/FTorch/blob/main/LICENSE)
!    file for details.
module test_scalar_constructors
  use funit
  use ftorch, only: torch_scalar, torch_scalar_delete, torch_scalar_get_data
  use ftorch_test_utils, only: assert_isclose
  use iso_c_binding, only: c_associated

  implicit none

  public

contains

  ! Unit test for the torch_scalar_from_value subroutine
  @test
  subroutine test_torch_scalar_from_value()
    use ftorch, only: torch_scalar_from_value
    use, intrinsic :: iso_fortran_env, only: sp => real32

    implicit none

    ! Set working precision for reals
    integer, parameter :: wp = sp

    type(torch_scalar) :: scalar
    real(wp), target   :: input_value
    real(wp), pointer  :: output_value

    input_value = 1.0

    ! Check the scalar pointer is not associated
    @assertFalse(c_associated(scalar%p))

    ! Create a scalar with the provided value
    print *, "DEBUG: input=", input_value
    call torch_scalar_from_value(scalar, input_value)

    ! Check the scalar pointer is associated
    @assertTrue(c_associated(scalar%p))

    ! Check the scalar contains the expected value
    call torch_scalar_get_data(scalar, output_value)
    print *, "DEBUG: output=", output_value
    if (.not. assert_isclose(output_value, input_value, "torch_scalar_from_value")) then
      call clean_up()
      stop 999
    end if

    call clean_up()

    contains

      ! Subroutine for freeing memory and nullifying pointers used in the unit test
      subroutine clean_up()
        nullify(output_value)
        call torch_scalar_delete(scalar)
      end subroutine clean_up

  end subroutine test_torch_scalar_from_value

end module test_scalar_constructors
