!| Unit tests for FTorch subroutines that interrogate tensors on the CPU.
!
!  * License
!    FTorch is released under an MIT license.
!    See the [LICENSE](https://github.com/Cambridge-ICCS/FTorch/blob/main/LICENSE)
!    file for details.
module test_tensor_interrogation
  use funit
  use ftorch, only: torch_kFloat32, torch_kCPU, torch_tensor, torch_tensor_empty
  use iso_c_binding, only: c_int64_t

  implicit none

  public

  ! Parameters common across all test cases
  integer, parameter :: device_type = torch_kCPU

  ! Typedef holding a set of parameter values
  @testParameter
  type, extends(AbstractTestParameter) :: TestParametersType
    logical :: requires_grad
  contains
    procedure :: toString
  end type TestParametersType

  ! Typedef for a test case with a particular set of parameters
  @testCase(constructor=test_case_ctor)
  type, extends (ParameterizedTestCase) :: TestCaseType
    type(TestParametersType) :: param
  end type TestCaseType

contains

  ! Constructor for the test case type
  function test_case_ctor(param)
    type(TestCaseType) :: test_case_ctor
    type(TestParametersType), intent(in) :: param
    test_case_ctor%param = param
  end function test_case_ctor

  ! A fixture comprised of a full list of parameter sets
  function get_parameters_full() result(params)
    type(TestParametersType), allocatable :: params(:)
    params = [ &
      TestParametersType(.false.), &
      TestParametersType(.true.) &
    ]
  end function get_parameters_full

  ! A fixture comprised of a short list of parameter sets
  function get_parameters_short() result(params)
    type(TestParametersType), allocatable :: params(:)
    params = [TestParametersType(.false.)]
  end function get_parameters_short

  ! Function for representing a parameter set as a string
  function toString(this) result(string)
    class(TestParametersType), intent(in) :: this
    character(:), allocatable :: string
    character(len=3) :: str
    write(str,"(l1)") this%requires_grad
    string = str
  end function toString

  ! Unit test for the torch_tensor_get_rank method of a 1D tensor
  @test(testparameters={get_parameters_short()})
  subroutine test_get_rank_1D(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 1
    integer(kind=c_int64_t), parameter :: tensor_shape(ndims) = [6]
    integer, parameter :: dtype = torch_kFloat32

    ! Create a tensor with uninitialised values and check torch_tensor_get_rank can correctly
    ! identify its rank
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertEqual(ndims, tensor%get_rank())

  end subroutine test_get_rank_1D

  ! Unit test for the torch_tensor_get_rank method of a 2D tensor
  @test(testparameters={get_parameters_short()})
  subroutine test_get_rank_2D(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 2
    integer(kind=c_int64_t), parameter :: tensor_shape(ndims) = [2,3]
    integer, parameter :: dtype = torch_kFloat32

    ! Create a tensor with uninitialised values and check torch_tensor_get_rank can correctly
    ! identify its rank
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertEqual(ndims, tensor%get_rank())

  end subroutine test_get_rank_2D

  ! Unit test for the torch_tensor_get_rank method of a 3D tensor
  @test(testparameters={get_parameters_short()})
  subroutine test_get_rank_3D(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 3
    integer(kind=c_int64_t), parameter :: tensor_shape(ndims) = [1,2,3]
    integer, parameter :: dtype = torch_kFloat32

    ! Create a tensor with uninitialised values and check torch_tensor_get_rank can correctly
    ! identify its rank
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertEqual(ndims, tensor%get_rank())

  end subroutine test_get_rank_3D

  ! Unit test for the torch_tensor_get_shape method of a 1D tensor
  @test(testparameters={get_parameters_short()})
  subroutine test_get_shape_1D(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 1
    integer(kind=c_int64_t), parameter :: tensor_shape(ndims) = [6]
    integer, parameter :: dtype = torch_kFloat32

    ! Create a tensor with uninitialised values and check torch_tensor_get_shape can correctly
    ! identify its shape
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertTrue(all(tensor_shape == tensor%get_shape()))

  end subroutine test_get_shape_1D

  ! Unit test for the torch_tensor_get_shape method of a 2D tensor
  @test(testparameters={get_parameters_short()})
  subroutine test_get_shape_2D(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 2
    integer(kind=c_int64_t), parameter :: tensor_shape(ndims) = [2, 3]
    integer, parameter :: dtype = torch_kFloat32

    ! Create a tensor with uninitialised values and check torch_tensor_get_shape can correctly
    ! identify its shape
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertTrue(all(tensor_shape == tensor%get_shape()))

  end subroutine test_get_shape_2D

  ! Unit test for the torch_tensor_get_shape method of a 3D tensor
  @test(testparameters={get_parameters_short()})
  subroutine test_get_shape_3D(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 3
    integer(kind=c_int64_t), parameter :: tensor_shape(ndims) = [1, 2, 3]
    integer, parameter :: dtype = torch_kFloat32

    ! Create a tensor with uninitialised values and check torch_tensor_get_shape can correctly
    ! identify its shape
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertTrue(all(tensor_shape == tensor%get_shape()))

  end subroutine test_get_shape_3D

  ! Unit test for the torch_tensor_get_dtype function
  @test(testparameters={get_parameters_short()})
  subroutine test_get_dtype(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 1
    integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [1]
    integer, parameter :: dtype = torch_kFloat32
    integer, parameter :: expected = torch_kFloat32

    ! Create an empty tensor for 32-bit floats and check that torch_tensor_get_dtype can get the
    ! device type
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertEqual(expected, tensor%get_dtype())

  end subroutine test_get_dtype

  ! Unit test for the torch_tensor_get_device_type function applied to a tensor on the CPU
  @test(testparameters={get_parameters_short()})
  subroutine test_get_device_type(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 1
    integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [1]
    integer, parameter :: dtype = torch_kFloat32
    integer, parameter :: expected = torch_kCPU

    ! Create an empty tensor on the CPU with the default device type and check that
    ! torch_tensor_get_device_type can get the device type
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertEqual(expected, tensor%get_device_type())

  end subroutine test_get_device_type

  ! Unit test for the torch_tensor_get_device_index function applied to a tensor on the CPU
  @test(testparameters={get_parameters_short()})
  subroutine test_get_device_index_default(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 1
    integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [1]
    integer, parameter :: dtype = torch_kFloat32
    integer, parameter :: expected = -1

    ! Create an empty tensor on the CPU with the default device index and check that
    ! torch_tensor_get_device_index can get the device index
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type)
    @assertEqual(expected, tensor%get_device_index())

  end subroutine test_get_device_index_default

  ! Unit test for the default value of the torch_tensor_requires_grad function
  @test(testparameters={get_parameters_short()})
  subroutine test_requires_grad_default(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 1
    integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [1]
    integer, parameter :: dtype = torch_kFloat32
    logical, parameter :: expected = .true.

    ! Create an empty tensor on the CPU with the default device type
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type, &
                            requires_grad=expected)

    ! Check that torch_tensor_get_device_type can get the device type
    if (expected .neqv. tensor%requires_grad()) then
      print *, "Error :: tensor%requires_grad() returned incorrect value"
      stop 999
    end if

  end subroutine test_requires_grad_default

  ! Unit test for the torch_tensor_requires_grad function
  @test(testparameters={get_parameters_full()})
  subroutine test_requires_grad(this)
    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 1
    integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [1]
    integer, parameter :: dtype = torch_kFloat32
    logical :: expected

    ! Create an empty tensor on the CPU with the default device type
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type, &
                            requires_grad=this%param%requires_grad)

    ! Check that torch_tensor_get_device_type can get the device type
    expected = this%param%requires_grad
    if (expected .neqv. tensor%requires_grad()) then
      print *, "Error :: tensor%requires_grad() returned incorrect value"
      stop 999
    end if

  end subroutine test_requires_grad

end module test_tensor_interrogation
