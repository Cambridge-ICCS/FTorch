!| Unit tests for FTorch subroutines that construct and destroy tensors.
!
!  * License
!    FTorch is released under an MIT license.
!    See the [LICENSE](https://github.com/Cambridge-ICCS/FTorch/blob/main/LICENSE)
!    file for details.
module test_tensor_constructors_destructors
  use funit
  use ftorch, only: assignment(=), torch_kFloat32, torch_kCPU, torch_tensor, &
                    torch_tensor_delete, torch_tensor_from_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_fortran_env, only: sp => real32
  use iso_c_binding, only: c_associated, c_int64_t

  implicit none

  public

  ! Set working precision for reals
  integer, parameter :: wp = sp

  ! All unit tests in this module run on CPU
  integer, parameter :: device_type = torch_kCPU
  integer, parameter :: device_index = -1

  ! All unit tests in this module use float32 precision
  integer, parameter :: dtype = torch_kFloat32

  ! Typedef holding a set of parameter values
  @testParameter
  type, extends(AbstractTestParameter) :: TestParametersType
    logical :: requires_grad  ! Value used for the requires_grad argument
    logical :: auto_delete    ! torch_tensor_delete is called when .false., otherwise the finalizer
                              !   will call it when a tensor goes out of scope
    logical :: reordered      ! If .true., a reversed tensor layout is used
    integer :: iterations     ! Number of times to construct/destruct a tensor
  contains
    procedure :: toString
  end type TestParametersType

  ! Typedef for a test case with a particular set of parameters
  @testCase(constructor=test_case_constructor)
  type, extends (ParameterizedTestCase) :: TestCaseType
    type(TestParametersType) :: param
  end type TestCaseType

contains

  ! Constructor for the test case type
  function test_case_constructor(param)
    type(TestCaseType) :: test_case_constructor
    type(TestParametersType), intent(in) :: param
    test_case_constructor%param = param
  end function test_case_constructor

  ! A fixture comprised of parameter sets for destructor tests
  function get_parameters_destruction() result(params)
    type(TestParametersType), allocatable :: params(:)
    params = [ &
      TestParametersType(.false.,.false.,.false.,1), &
      TestParametersType(.false.,.false.,.false.,2), &
      TestParametersType(.false.,.true.,.false.,1), &
      TestParametersType(.false.,.true.,.false.,2) &
    ]
  end function get_parameters_destruction

  ! A fixture comprised of parameter sets for varying the requires_grad argument
  function get_parameters_requires_grad() result(params)
    type(TestParametersType), allocatable :: params(:)
    params = [ &
      TestParametersType(.false.,.false.,.false.,1), &
      TestParametersType(.true.,.false.,.false.,1) &
    ]
  end function get_parameters_requires_grad

  ! A fixture comprised of parameter sets for varying the tensor layout
  function get_parameters_reordered() result(params)
    type(TestParametersType), allocatable :: params(:)
    params = [ &
      TestParametersType(.false.,.false.,.false.,1), &
      TestParametersType(.false.,.false.,.true.,1) &
    ]
  end function get_parameters_reordered

  ! Function for representing a parameter set as a string
  function toString(this) result(string)
    class(TestParametersType), intent(in) :: this
    character(:), allocatable :: string
    character(len=7) :: str
    write(str,"(l1,',',l1,',',l1,',',i1)") this%requires_grad, this%auto_delete, this%reordered, &
                                           this%iterations
    string = str
  end function toString

  ! Unit test for the torch_tensor_empty subroutine
  @test(testparameters={get_parameters_requires_grad()})
  subroutine test_torch_tensor_empty(this)
    use ftorch, only: torch_tensor_empty

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 2
    integer(c_int64_t), dimension(2), parameter :: tensor_shape = [2, 3]

    ! Check the tensor pointer is not associated
    @assertFalse(c_associated(tensor%p))

    ! Create a tensor without any data values assigned
    call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type, device_index, &
                            this%param%requires_grad)

    ! Check the tensor pointer is associated
    @assertTrue(c_associated(tensor%p))

  end subroutine test_torch_tensor_empty

  ! Unit test for the torch_tensor_zeros subroutine
  @test(testParameters={get_parameters_requires_grad()})
  subroutine test_torch_tensor_zeros(this)
    use ftorch, only: torch_tensor_zeros

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer(c_int64_t), parameter :: tensor_shape(ndims) = [2, 3]
    real(wp), dimension(2,3), target :: out_data
    real(wp), dimension(2,3) :: expected

    ! Check the tensor pointer is not associated
    @assertFalse(c_associated(tensor1%p))

    ! Create a tensor of zeros
    call torch_tensor_zeros(tensor1, ndims, tensor_shape, dtype, device_type, device_index, &
                            this%param%requires_grad)

    ! Check the tensor pointer is associated
    @assertTrue(c_associated(tensor1%p))

    ! Create a tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, device_type, device_index)

    ! Set the values of the second tensor to match those of the first using the overloaded
    ! assignment operator
    tensor2 = tensor1

    ! Check that the tensor values are all zero
    expected(:,:) = 0.0
    if (.not. assert_allclose(out_data, expected, test_name="test_torch_tensor_zeros")) then
      print *, "Error :: incorrect output from torch_tensor_zeros subroutine"
      stop 999
    end if

  end subroutine test_torch_tensor_zeros

  ! Unit test for the torch_tensor_ones subroutine
  @test(testParameters={get_parameters_requires_grad()})
  subroutine test_torch_tensor_ones(this)
    use ftorch, only: torch_tensor_ones

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer(c_int64_t), parameter :: tensor_shape(ndims) = [2, 3]
    real(wp), dimension(2,3), target :: out_data
    real(wp), dimension(2,3) :: expected

    ! Check the tensor pointer is not associated
    @assertFalse(c_associated(tensor1%p))

    ! Create tensor of ones
    call torch_tensor_ones(tensor1, ndims, tensor_shape, dtype, device_type, device_index, &
                           this%param%requires_grad)

    ! Check the tensor pointer is associated
    @assertTrue(c_associated(tensor1%p))

    ! Create a tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, device_type, device_index)

    ! Set the values of the second tensor to match those of the first using the overloaded
    ! assignment operator
    tensor2 = tensor1

    ! Check that the tensor values are all one
    expected(:,:) = 1.0
    if (.not. assert_allclose(out_data, expected, test_name="test_torch_tensor_ones")) then
      print *, "Error :: incorrect output from torch_tensor_ones subroutine"
      stop 999
    end if

  end subroutine test_torch_tensor_ones

  ! Unit test for the torch_tensor_from_array subroutine in the 1D case
  @test(testParameters={get_parameters_requires_grad()})
  subroutine test_torch_from_array_1d(this)

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 1
    real(wp), dimension(6), target :: in_data
    real(wp), dimension(6), target :: out_data

    ! Create an arbitrary input array
    in_data(:) = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]

    ! Check the tensor pointer is not associated
    @assertFalse(c_associated(tensor1%p))

    ! Create a tensor based off an input array
    call torch_tensor_from_array(tensor1, in_data, device_type, device_index, &
                                 this%param%requires_grad)

    ! Check the tensor pointer is associated
    @assertTrue(c_associated(tensor1%p))

    ! Create a tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, device_type, device_index)

    ! Set the values of the second tensor to match those of the first using the overloaded
    ! assignment operator
    tensor2 = tensor1

    ! Compare the data in the tensor to the input data
    if (.not. assert_allclose(out_data, in_data, test_name="test_torch_tensor_from_array")) then
      print *, "Error :: incorrect output from torch_tensor_from_array subroutine"
      stop 999
    end if

  end subroutine test_torch_from_array_1d

  ! Unit test for the torch_tensor_from_array subroutine in the 2D case
  @test(testParameters={get_parameters_reordered()})
  subroutine test_torch_from_array_2d(this)

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer :: tensor_layout(ndims)
    real(wp), dimension(2,3), target :: in_data
    real(wp), dimension(2,3), target :: out_data
    real(wp), dimension(2,3) :: expected

    ! Create an arbitrary input array
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2,3])

    ! Check the tensor pointer is not associated
    @assertFalse(c_associated(tensor1%p))

    ! Create a tensor based off an input array
    if (this%param%reordered) then
      tensor_layout(:) = [2, 1]
    else
      tensor_layout(:) = [1, 2]
    end if
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type, device_index, &
                                 this%param%requires_grad)

    ! Check the tensor pointer is associated
    @assertTrue(c_associated(tensor1%p))

    ! Create a tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, device_type, device_index)

    ! Set the values of the second tensor to match those of the first using the overloaded
    ! assignment operator
    tensor2 = tensor1

    ! Compare the data in the tensor to the (reordered) input data
    expected(:,:) = reshape(in_data, [2,3], order=tensor_layout)
    if (.not. assert_allclose(out_data, expected, test_name="test_torch_tensor_from_array")) then
      print *, "Error :: incorrect output from torch_tensor_from_array subroutine"
      stop 999
    end if

  end subroutine test_torch_from_array_2d

  ! Unit test for the torch_tensor_from_array subroutine in the 3D case
  @test(testParameters={get_parameters_reordered()})
  subroutine test_torch_from_array_3d(this)

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 3
    integer :: tensor_layout(ndims)
    real(wp), dimension(1,2,3), target :: in_data
    real(wp), dimension(1,2,3), target :: out_data
    real(wp), dimension(1,2,3) :: expected

    ! Create an arbitrary input array
    in_data(:,:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [1,2,3])

    ! Check the tensor pointer is not associated
    @assertFalse(c_associated(tensor1%p))

    ! Create a tensor based off an input array
    if (this%param%reordered) then
      tensor_layout(:) = [3, 2, 1]
    else
      tensor_layout(:) = [1, 2, 3]
    end if
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type, device_index, &
                                 this%param%requires_grad)

    ! Check the tensor pointer is associated
    @assertTrue(c_associated(tensor1%p))

    ! Create a tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, device_type, device_index)

    ! Set the values of the second tensor to match those of the first using the overloaded
    ! assignment operator
    tensor2 = tensor1

    ! Compare the data in the tensor to the (reordered) input data
    expected(:,:,:) = reshape(in_data, [1,2,3], order=tensor_layout)
    if (.not. assert_allclose(out_data, expected, test_name="test_torch_tensor_from_array")) then
      print *, "Error :: incorrect output from torch_tensor_from_array subroutine"
      stop 999
    end if

  end subroutine test_torch_from_array_3d

  ! Unit test for the torch_tensor_from_blob subroutine
  @test(testParameters={get_parameters_requires_grad()})
  subroutine test_torch_from_blob(this)
    use ftorch, only: torch_tensor_from_blob
    use, intrinsic :: iso_c_binding, only : c_loc

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer(kind=c_int64_t), parameter :: tensor_shape(ndims) = [2,3]
    integer, parameter :: layout(ndims) = [1, 2]
    real(wp), dimension(2,3), target :: in_data
    real(wp), dimension(2,3), target :: out_data

    ! Create an arbitrary input array
    in_data = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2,3])

    ! Check the tensor pointer is not associated
    @assertFalse(c_associated(tensor1%p))

    ! Create a tensor based off an input array
    call torch_tensor_from_blob(tensor1, c_loc(in_data), ndims, tensor_shape, layout, dtype, &
                                device_type, device_index, this%param%requires_grad)

    ! Check the tensor pointer is associated
    @assertTrue(c_associated(tensor1%p))

    ! Create a tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, layout, device_type, device_index)

    ! Set the values of the second tensor to match those of the first using the overloaded
    ! assignment operator
    tensor2 = tensor1

    ! Compare the data in the tensor to the input data
    if (.not. assert_allclose(out_data, in_data, test_name="test_torch_tensor_from_blob")) then
      print *, "Error :: incorrect output from torch_tensor_from_array subroutine"
      stop 999
    end if

  end subroutine test_torch_from_blob

  ! Unit test for destroying tensors, both manually with torch_tensor_delete and automatically (via
  ! torch_tensor's destructor)
  @test(testparameters={get_parameters_destruction()})
  subroutine test_torch_tensor_destruction(this)
    use ftorch, only: torch_tensor_empty

    implicit none

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 2
    integer(c_int64_t), dimension(2), parameter :: tensor_shape = [2, 3]
    integer :: i

    do i = 1, this%param%iterations

      ! Check the tensor pointer is not associated
      @assertFalse(c_associated(tensor%p))

      ! Create a tensor without any data values assigned
      call torch_tensor_empty(tensor, ndims, tensor_shape, dtype, device_type, device_index)

      ! Check the tensor pointer is associated
      @assertTrue(c_associated(tensor%p))

      if (i < this%param%iterations .or. .not. this%param%auto_delete) then
        ! Call torch_tensor_delete manually
        call torch_tensor_delete(tensor)

        ! Check torch_tensor_delete does indeed free the memory
        @assertFalse(c_associated(tensor%p))
      end if

    end do

  end subroutine test_torch_tensor_destruction

end module test_tensor_constructors_destructors
