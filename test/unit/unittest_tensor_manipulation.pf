!| Unit tests for FTorch's tensor manipulation functionality.
!
!  * License
!    FTorch is released under an MIT license.
!    See the [LICENSE](https://github.com/Cambridge-ICCS/FTorch/blob/main/LICENSE)
!    file for details.
module unittest_tensor_manipulation
  use funit
  use ftorch, only: assignment(=), torch_kCPU, torch_kFloat32, torch_tensor, torch_tensor_from_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_c_binding, only : c_int64_t

  implicit none

  public

  integer, parameter :: device_type = torch_kCPU

contains

  @test
  subroutine test_torch_tensor_zero()
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    type(torch_tensor) :: tensor
    integer, parameter :: ndims = 2
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create an arbitrary input array
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create a tensor based off an input array
    call torch_tensor_from_array(tensor, in_data, device_type)

    ! Call the torch_tensor_zero subroutine using its class method alias
    call tensor%zero()

    ! Compare the data in the tensor to the input array
    expected(:,:) = 0.0
    test_pass = assert_allclose(in_data, expected, test_name="test_torch_tensor_zero")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from torch_tensor_zero"
      stop 999
    end if

  end subroutine test_torch_tensor_zero

  @test
  subroutine test_tensor_shallow_copy()
    use, intrinsic :: iso_fortran_env, only: wp => real64
    use ftorch, only: torch_tensor_shallow_copy

    type(torch_tensor) :: original, copy,  out
    real(wp), dimension(2,3), target :: in_data
    real(wp), dimension(2,3), target :: out_data


    ! Original tensor backed by Fortran array
    in_data = reshape([1.0_wp, 2.0_wp, 3.0_wp, 4.0_wp, 5.0_wp, 6.0_wp], [2, 3])
    call torch_tensor_from_array(original, in_data, device_type)

    ! Another view of the original tensor
    call torch_tensor_shallow_copy(copy, original)

    ! Output tensor backed by another Fortran array
    call torch_tensor_from_array(out, out_data, device_type)

    in_data = 2.0_wp * in_data

    out = copy

    @assertTrue( assert_allclose(out_data, in_data, test_name="test_tensor_shallow_copy") )

  end subroutine test_tensor_shallow_copy

end module unittest_tensor_manipulation
