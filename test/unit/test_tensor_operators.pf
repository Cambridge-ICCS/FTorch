!| Unit tests for FTorch's non-overloaded operators acting on tensors.
!
!  * License
!    FTorch is released under an MIT license.
!    See the [LICENSE](https://github.com/Cambridge-ICCS/FTorch/blob/main/LICENSE)
!    file for details.
module test_tensor_operators
  use funit
  use ftorch, only: assignment(=), torch_kCPU, torch_kFloat32, torch_tensor, torch_tensor_from_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_fortran_env, only: sp => real32
  use, intrinsic :: iso_c_binding, only : c_int64_t

  implicit none

  public

  ! Set working precision for reals
  integer, parameter :: wp = sp

  ! All unit tests in this module run on CPU
  integer, parameter :: device_type = torch_kCPU

  ! All unit tests in this module use 2D arrays with float32 precision
  integer, parameter :: ndims = 2
  integer, parameter :: dtype = torch_kFloat32

contains

  @test
  subroutine test_torch_tensor_sum()
    use ftorch, only: torch_tensor_sum

    type(torch_tensor) :: tensor1, tensor2
    real(wp), dimension(2,3), target :: in_data
    real(wp), dimension(1), target :: out_data
    real(wp), dimension(2,3) :: expected2d
    real(wp), dimension(1) :: expected1d
    logical :: test_pass

    ! Create two arbitrary input arrays
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create tensors based off the input array
    call torch_tensor_from_array(tensor1, in_data, device_type)

    ! Create a tensor based off an output array containing a single scalar value
    call torch_tensor_from_array(tensor2, out_data, device_type)

    ! Compute the sum over the entries in the first tensor and assign it to the single value in the
    ! second
    call torch_tensor_sum(tensor1, tensor2)

    ! Check input arrays are unchanged by the summation
    expected2d(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data, expected2d, test_name="test_torch_tensor_sum")) then
      print *, "Error :: first input array was changed during summation"
      stop 999
    end if

    ! Compare the data in the tensor to the negative of the input array
    expected1d(:) = 21.0
    test_pass = assert_allclose(out_data, expected1d, test_name="test_torch_tensor_sum")
    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded summation operator"
      stop 999
    end if

  end subroutine test_torch_tensor_sum

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_mean()
    use ftorch, only: torch_tensor_mean

    type(torch_tensor) :: tensor1, tensor2
    real(wp), dimension(2,3), target :: in_data
    real(wp), dimension(1), target :: out_data
    real(wp), dimension(2,3) :: expected2d
    real(wp), dimension(1) :: expected1d
    logical :: test_pass

    ! Create two arbitrary input arrays
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create tensors based off the input array
    call torch_tensor_from_array(tensor1, in_data, device_type)

    ! Create a tensor based off an output array containing a single scalar value
    call torch_tensor_from_array(tensor2, out_data, device_type)

    ! Compute the mean over the entries in the first tensor and assign it to the single value in the
    ! second
    call torch_tensor_mean(tensor1, tensor2)

    ! Check input arrays are unchanged by the summation
    expected2d(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data, expected2d, test_name="test_torch_tensor_mean")) then
      print *, "Error :: first input array was changed when taking the mean"
      stop 999
    end if

    ! Compare the data in the tensor to the negative of the input array
    expected1d(:) = 21.0 / 6.0
    test_pass = assert_allclose(out_data, expected1d, test_name="test_torch_tensor_mean")
    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded mean operator"
      stop 999
    end if

  end subroutine test_torch_tensor_mean

end module test_tensor_operators
