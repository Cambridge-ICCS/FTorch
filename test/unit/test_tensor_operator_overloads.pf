!| Unit tests for FTorch's overloaded operators involving tensors.
!
!  * License
!    FTorch is released under an MIT license.
!    See the [LICENSE](https://github.com/Cambridge-ICCS/FTorch/blob/main/LICENSE)
!    file for details.
module test_tensor_operator_overloads
  use funit
  use ftorch, only: assignment(=), torch_kCPU, torch_kFloat32, torch_tensor, torch_tensor_from_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

  implicit none

  public

  integer, parameter :: device_type = torch_kCPU

  ! Typedef holding a set of parameter values
  @testParameter
  type, extends(AbstractTestParameter) :: TestParametersType
    logical :: switch
  contains
    procedure :: toString
  end type TestParametersType

  ! Typedef for a test case with a particular set of parameters
  @testCase(constructor=test_case_ctor)
  type, extends (ParameterizedTestCase) :: TestCaseType
    type(TestParametersType) :: param
  end type TestCaseType

contains

  ! A fixture comprised of a full list of parameter sets
  function get_parameters_full() result(params)
    type(TestParametersType), allocatable :: params(:)
    params = [ &
      TestParametersType(.false.), &
      TestParametersType(.true.) &
    ]
  end function get_parameters_full

  ! A fixture comprised of a short list of parameter sets
  function get_parameters_short() result(params)
    type(TestParametersType), allocatable :: params(:)
    params = [TestParametersType(.false.)]
  end function get_parameters_short

  ! Constructor for the test case type
  function test_case_ctor(param)
    type(TestCaseType) :: test_case_ctor
    type(TestParametersType), intent(in) :: param
    test_case_ctor%param = param
  end function test_case_ctor

  ! Function for representing a parameter set as a string
  function toString(this) result(string)
    class(TestParametersType), intent(in) :: this
    character(:), allocatable :: string
    character(len=1) :: str
    write(str,'(l1)') this%switch
    string = str
  end function toString

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_assign(this)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data
    real(wp), dimension(2,3), target :: out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create an arbitrary input array
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create a tensor based off an input array
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, tensor_layout, device_type)

    ! Create another tensor by copying the first using the overloaded assignment operator
    tensor2 = tensor1

    ! Check input array is unchanged by the assignment
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data, expected, test_name="test_torch_tensor_assign")) then
      print *, "Error :: input array was changed during assignment"
      stop 999
    end if

    ! Compare the data in the tensor to the input array
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_assign")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded assignment operator"
      stop 999
    end if

  end subroutine test_torch_tensor_assign

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_add(this)
    use ftorch, only: operator(+)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2, tensor3
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data1, in_data2, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create two arbitrary input arrays
    in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

    ! Create tensors based off the two input arrays
    call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
    call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor3, out_data, tensor_layout, device_type)

    ! Create another tensor as the sum of the first two using the overloaded addition operator
    tensor3 = tensor1 + tensor2

    ! Check input arrays are unchanged by the addition
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data1, expected, test_name="test_torch_tensor_add")) then
      print *, "Error :: first input array was changed during addition"
      stop 999
    end if
    expected(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])
    if (.not. assert_allclose(in_data2, expected, test_name="test_torch_tensor_add")) then
      print *, "Error :: second input array was changed during addition"
      stop 999
    end if

    ! Compare the data in the tensor to the sum of the input arrays
    expected(:,:) = in_data1 + in_data2
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_add")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded addition operator"
      stop 999
    end if

  end subroutine test_torch_tensor_add

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_subtract(this)
    use ftorch, only: operator(-)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2, tensor3
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data1, in_data2, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create two arbitrary input arrays
    in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

    ! Create tensors based off the two input arrays
    call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
    call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor3, out_data, tensor_layout, device_type)

    ! Create another tensor as the difference of the first two using the overloaded subtraction
    ! operator
    tensor3 = tensor1 - tensor2

    ! Check input arrays are unchanged by the subtraction
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data1, expected, test_name="test_torch_tensor_subtract")) then
      print *, "Error :: first input array was changed during subtraction"
      stop 999
    end if
    expected(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])
    if (.not. assert_allclose(in_data2, expected, test_name="test_torch_tensor_subtract")) then
      print *, "Error :: second input array was changed during subtraction"
      stop 999
    end if

    ! Compare the data in the tensor to the difference of the input arrays
    expected(:,:) = in_data1 - in_data2
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_subtract")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded subtraction operator"
      stop 999
    end if

  end subroutine test_torch_tensor_subtract

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_negative(this)
    use FUnit
    use ftorch, only: assignment(=), operator(-), ftorch_int, torch_kCPU, torch_kFloat32, &
                      torch_tensor, torch_tensor_from_array
    use ftorch_test_utils, only: assert_allclose
    use, intrinsic :: iso_fortran_env, only: sp => real32
    use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    integer, parameter :: device_type = torch_kCPU
    real(wp), dimension(2,3), target :: in_data, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create two arbitrary input arrays
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create tensors based off the input array
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, tensor_layout, device_type)

    ! Create another tensor as the negative of the first using the overloaded negative operator
    tensor2 = -tensor1

    ! Check input arrays are unchanged by the negation
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data, expected, test_name="test_torch_tensor_negative")) then
      print *, "Error :: first input array was changed during subtraction"
      stop 999
    end if

    ! Compare the data in the tensor to the negative of the input array
    expected(:,:) = -in_data
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_negative")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded subtraction operator"
      stop 999
    end if

  end subroutine test_torch_tensor_negative

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_multiply(this)
    use ftorch, only: operator(*)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2, tensor3
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data1, in_data2, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create two arbitrary input arrays
    in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

    ! Create tensors based off the two input arrays
    call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
    call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor3, out_data, tensor_layout, device_type)

    ! Create another tensor as the product of the first two using the overloaded multiplication
    ! operator
    tensor3 = tensor1 * tensor2

    ! Check input arrays are unchanged by the multiplication
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data1, expected, test_name="test_torch_tensor_multiply")) then
      print *, "Error :: first input array was changed during multiplication"
      stop 999
    end if
    expected(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])
    if (.not. assert_allclose(in_data2, expected, test_name="test_torch_tensor_multiply")) then
      print *, "Error :: second input array was changed during multiplication"
      stop 999
    end if

    ! Compare the data in the tensor to the product of the input arrays
    expected(:,:) = in_data1 * in_data2
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_multiply")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded multiplication operator"
      stop 999
    end if

  end subroutine test_torch_tensor_multiply

  @test(testParameters={get_parameters_full()})
  subroutine test_torch_tensor_scalar_multiply(this)
    use ftorch, only: operator(*)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), parameter :: scalar = 3.14
    real(wp), dimension(2,3), target :: in_data, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create an arbitrary input array
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create a tensor based off the input array
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, tensor_layout, device_type)

    ! Create another tensor as the product of a scalar constant and the first tensor using the
    ! overloaded multiplication operator
    if (this%param%switch) then
      tensor2 = scalar * tensor1
    else
      tensor2 = tensor1 * scalar
    end if

    ! Check input array is unchanged by scalar multiplication
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    test_pass = assert_allclose(in_data, expected, test_name="test_torch_tensor_scalar_multiply")
    if (.not. test_pass) then
      print *, "Error :: input array was changed during scalar multiplication"
      stop 999
    end if

    ! Compare the data in the tensors to the scaled input arrays
    expected(:,:) = scalar * in_data
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_scalar_multiply")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded scalar multiplication operator"
      stop 999
    end if

  end subroutine test_torch_tensor_scalar_multiply

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_divide(this)
    use ftorch, only: operator(/)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2, tensor3
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data1, in_data2, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create two arbitrary input arrays
    in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

    ! Create tensors based off the two input arrays
    call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
    call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor3, out_data, tensor_layout, device_type)

    ! Create another tensor as the quotient of the first two using the overloaded division operator
    tensor3 = tensor1 / tensor2

    ! Check input arrays are unchanged by the division
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data1, expected, test_name="test_torch_tensor_divide")) then
      print *, "Error :: first input array was changed during division"
      stop 999
    end if
    expected(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])
    if (.not. assert_allclose(in_data2, expected, test_name="test_torch_tensor_divide")) then
      print *, "Error :: second input array was changed during division"
      stop 999
    end if

    ! Compare the data in the tensor to the quotient of the input arrays
    expected(:,:) = in_data1 / in_data2
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_divide")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded division operator"
      stop 999
    end if

  end subroutine test_torch_tensor_divide

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_scalar_divide(this)
    use ftorch, only: operator(/)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), parameter :: scalar = 3.14
    real(wp), dimension(2,3), target :: in_data, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create an arbitrary input array
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create a tensor based off the input array
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, tensor_layout, device_type)

    ! Create another tensor as the quotient of the first tensor and a scalar constant using the
    ! overloaded division operator
    tensor2 = tensor1 / scalar

    ! Check input array is unchanged by post-division
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    test_pass = assert_allclose(in_data, expected, test_name="test_torch_tensor_scalar_divide")
    if (.not. test_pass) then
      print *, "Error :: input array was changed during scalar division"
      stop 999
    end if

    ! Compare the data in the tensor to the scaled input array
    expected(:,:) = in_data / scalar
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_scalar_divide")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded scalar division operator"
      stop 999
    end if

  end subroutine test_torch_tensor_scalar_divide

  @test(testParameters={get_parameters_full()})
  subroutine test_torch_tensor_square(this)
    use ftorch, only: operator(**)
    use, intrinsic :: iso_fortran_env, only: sp => real32

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create an arbitrary input array
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create a tensor based off the input array
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, tensor_layout, device_type)

    ! Create another tensor as the first tensor to the power of an exponent using the
    ! overloaded exponentiation operator
    if (this%param%switch) then
      tensor2 = tensor1 ** 2
    else
      tensor2 = tensor1 ** 2.0
    end if

    ! Check input array is unchanged by pre-multiplication
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data, expected, test_name="test_torch_tensor_square")) then
      print *, "Error :: input array was changed during exponentation (square)"
      stop 999
    end if

    ! Compare the data in the tensors to the squared input array
    expected(:,:) = in_data ** 2
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_square")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded exponentation operator (square)"
      stop 999
    end if

  end subroutine test_torch_tensor_square

  @test(testParameters={get_parameters_short()})
  subroutine test_torch_tensor_sqrt(this)
    use ftorch, only: operator(**)
    use, intrinsic :: iso_fortran_env, only: sp => real32
    use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

    ! Set working precision for reals
    integer, parameter :: wp = sp

    class(TestCaseType), intent(inout) :: this
    type(torch_tensor) :: tensor1, tensor2
    integer, parameter :: ndims = 2
    integer, parameter :: tensor_layout(ndims) = [1, 2]
    integer, parameter :: dtype = torch_kFloat32
    real(wp), dimension(2,3), target :: in_data, out_data
    real(wp), dimension(2,3) :: expected
    logical :: test_pass

    ! Create an arbitrary input array
    in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

    ! Create a tensor based off the input array
    call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type)

    ! Create another tensor based off an output array
    call torch_tensor_from_array(tensor2, out_data, tensor_layout, device_type)

    ! Create another tensors as the tensor to the power of 0.5 using the overloaded exponentiation
    ! operator
    tensor2 = tensor1 ** 0.5

    ! Check input array is unchanged by taking the square root
    expected(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
    if (.not. assert_allclose(in_data, expected, test_name="test_torch_tensor_sqrt")) then
      print *, "Error :: input array was changed during exponentation (square root)"
      stop 999
    end if

    ! Compare the data in the tensors to the square root of the input array
    expected(:,:) = in_data ** 0.5
    test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_sqrt")

    if (.not. test_pass) then
      print *, "Error :: incorrect output from overloaded exponentiation operator (square root)"
      stop 999
    end if

  end subroutine test_torch_tensor_sqrt

end module test_tensor_operator_overloads
