!| Unit tests for FTorch's overloaded operators involving tensors.
!
!  * License  
!    FTorch is released under an MIT license.
!    See the [LICENSE](https://github.com/Cambridge-ICCS/FTorch/blob/main/LICENSE)
!    file for details.

@test
subroutine test_torch_tensor_assign()
  use FUnit
  use ftorch, only: assignment(=), ftorch_int, torch_kCPU, torch_kFloat32, torch_tensor, &
                    torch_tensor_delete, torch_tensor_empty, torch_tensor_from_array, &
                    torch_tensor_to_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_fortran_env, only: sp => real32
  use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

  implicit none

  ! Set working precision for reals
  integer, parameter :: wp = sp

  type(torch_tensor) :: tensor1, tensor2
  integer, parameter :: ndims = 2
  integer(ftorch_int), parameter :: tensor_layout(ndims) = [1, 2]
  integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [2, 3]
  integer, parameter :: dtype = torch_kFloat32
  integer, parameter :: device_type = torch_kCPU
  real(wp), dimension(2,3), target :: in_data
  real(wp), dimension(:,:), pointer :: out_data
  real(wp), dimension(2,3) :: expected
  logical :: test_pass

  ! Create an arbitrary input array
  in_data(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])

  ! Create a tensor based off an input array
  call torch_tensor_from_array(tensor1, in_data, tensor_layout, device_type)

  ! Create another empty tensor and assign it to the first using the overloaded assignment operator
  call torch_tensor_empty(tensor2, ndims, tensor_shape, dtype, device_type)
  tensor2 = tensor1

  ! Extract Fortran array from the assigned tensor
  call torch_tensor_to_array(tensor2, out_data, shape(in_data))

  ! Compare the data in the tensor to the input data
  expected(:,:) = in_data
  test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_assign")
  @assertTrue(test_pass)
  @assertEqual(shape(expected), shape(out_data))

  ! Cleanup
  nullify(out_data)
  call torch_tensor_delete(tensor1)
  call torch_tensor_delete(tensor2)

end subroutine test_torch_tensor_assign

@test
subroutine test_torch_tensor_add()
  use FUnit
  use ftorch, only: assignment(=), operator(+), ftorch_int, torch_kCPU, torch_kFloat32, &
                    torch_tensor, torch_tensor_delete, torch_tensor_empty, &
                    torch_tensor_from_array, torch_tensor_to_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_fortran_env, only: sp => real32
  use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

  implicit none

  ! Set working precision for reals
  integer, parameter :: wp = sp

  type(torch_tensor) :: tensor1, tensor2, tensor3
  integer, parameter :: ndims = 2
  integer(ftorch_int), parameter :: tensor_layout(ndims) = [1, 2]
  integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [2, 3]
  integer, parameter :: dtype = torch_kFloat32
  integer, parameter :: device_type = torch_kCPU
  real(wp), dimension(2,3), target :: in_data1, in_data2
  real(wp), dimension(:,:), pointer :: out_data
  real(wp), dimension(2,3) :: expected
  logical :: test_pass

  ! Create two arbitrary input arrays
  in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
  in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

  ! Create tensors based off the two input arrays
  call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
  call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

  ! Create another empty tensor and assign it to the sum of the first two using the overloaded
  ! addition operator
  call torch_tensor_empty(tensor3, ndims, tensor_shape, dtype, device_type)
  tensor3 = tensor1 + tensor2

  ! Extract Fortran array from the assigned tensor
  call torch_tensor_to_array(tensor3, out_data, shape(in_data1))

  ! Compare the data in the tensor to the input data
  expected(:,:) = in_data1 + in_data2
  test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_add")
  @assertTrue(test_pass)
  @assertEqual(shape(expected), shape(out_data))

  ! Cleanup
  nullify(out_data)
  call torch_tensor_delete(tensor1)
  call torch_tensor_delete(tensor2)
  call torch_tensor_delete(tensor3)

end subroutine test_torch_tensor_add

@test
subroutine test_torch_tensor_subtract()
  use FUnit
  use ftorch, only: assignment(=), operator(-), ftorch_int, torch_kCPU, torch_kFloat32, &
                    torch_tensor, torch_tensor_delete, torch_tensor_empty, &
                    torch_tensor_from_array, torch_tensor_to_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_fortran_env, only: sp => real32
  use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

  implicit none

  ! Set working precision for reals
  integer, parameter :: wp = sp

  type(torch_tensor) :: tensor1, tensor2, tensor3
  integer, parameter :: ndims = 2
  integer(ftorch_int), parameter :: tensor_layout(ndims) = [1, 2]
  integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [2, 3]
  integer, parameter :: dtype = torch_kFloat32
  integer, parameter :: device_type = torch_kCPU
  real(wp), dimension(2,3), target :: in_data1, in_data2
  real(wp), dimension(:,:), pointer :: out_data
  real(wp), dimension(2,3) :: expected
  logical :: test_pass

  ! Create two arbitrary input arrays
  in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
  in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

  ! Create tensors based off the two input arrays
  call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
  call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

  ! Create another empty tensor and assign it to the difference of the first two using the
  ! overloaded subtraction operator
  call torch_tensor_empty(tensor3, ndims, tensor_shape, dtype, device_type)
  tensor3 = tensor1 - tensor2

  ! Extract Fortran array from the assigned tensor
  call torch_tensor_to_array(tensor3, out_data, shape(in_data1))

  ! Compare the data in the tensor to the input data
  expected(:,:) = in_data1 - in_data2
  test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_subtract")
  @assertTrue(test_pass)
  @assertEqual(shape(expected), shape(out_data))

  ! Cleanup
  nullify(out_data)
  call torch_tensor_delete(tensor1)
  call torch_tensor_delete(tensor2)
  call torch_tensor_delete(tensor3)

end subroutine test_torch_tensor_subtract

@test
subroutine test_torch_tensor_multiply()
  use FUnit
  use ftorch, only: assignment(=), operator(*), ftorch_int, torch_kCPU, torch_kFloat32, &
                    torch_tensor, torch_tensor_delete, torch_tensor_empty, &
                    torch_tensor_from_array, torch_tensor_to_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_fortran_env, only: sp => real32
  use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

  implicit none

  ! Set working precision for reals
  integer, parameter :: wp = sp

  type(torch_tensor) :: tensor1, tensor2, tensor3
  integer, parameter :: ndims = 2
  integer(ftorch_int), parameter :: tensor_layout(ndims) = [1, 2]
  integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [2, 3]
  integer, parameter :: dtype = torch_kFloat32
  integer, parameter :: device_type = torch_kCPU
  real(wp), dimension(2,3), target :: in_data1, in_data2
  real(wp), dimension(:,:), pointer :: out_data
  real(wp), dimension(2,3) :: expected
  logical :: test_pass

  ! Create two arbitrary input arrays
  in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
  in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

  ! Create tensors based off the two input arrays
  call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
  call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

  ! Create another empty tensor and assign it to the product of the first two using the overloaded
  ! multiplication operator
  call torch_tensor_empty(tensor3, ndims, tensor_shape, dtype, device_type)
  tensor3 = tensor1 * tensor2

  ! Extract Fortran array from the assigned tensor
  call torch_tensor_to_array(tensor3, out_data, shape(in_data1))

  ! Compare the data in the tensor to the input data
  expected(:,:) = in_data1 * in_data2
  test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_multiply")
  @assertTrue(test_pass)
  @assertEqual(shape(expected), shape(out_data))

  ! Cleanup
  nullify(out_data)
  call torch_tensor_delete(tensor1)
  call torch_tensor_delete(tensor2)
  call torch_tensor_delete(tensor3)

end subroutine test_torch_tensor_multiply

@test
subroutine test_torch_tensor_divide()
  use FUnit
  use ftorch, only: assignment(=), operator(/), ftorch_int, torch_kCPU, torch_kFloat32, &
                    torch_tensor, torch_tensor_delete, torch_tensor_empty, &
                    torch_tensor_from_array, torch_tensor_to_array
  use ftorch_test_utils, only: assert_allclose
  use, intrinsic :: iso_fortran_env, only: sp => real32
  use, intrinsic :: iso_c_binding, only : c_associated, c_int64_t

  implicit none

  ! Set working precision for reals
  integer, parameter :: wp = sp

  type(torch_tensor) :: tensor1, tensor2, tensor3
  integer, parameter :: ndims = 2
  integer(ftorch_int), parameter :: tensor_layout(ndims) = [1, 2]
  integer(c_int64_t), parameter, dimension(ndims) :: tensor_shape = [2, 3]
  integer, parameter :: dtype = torch_kFloat32
  integer, parameter :: device_type = torch_kCPU
  real(wp), dimension(2,3), target :: in_data1, in_data2
  real(wp), dimension(:,:), pointer :: out_data
  real(wp), dimension(2,3) :: expected
  logical :: test_pass

  ! Create two arbitrary input arrays
  in_data1(:,:) = reshape([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [2, 3])
  in_data2(:,:) = reshape([7.0, 8.0, 9.0, 10.0, 11.0, 12.0], [2, 3])

  ! Create tensors based off the two input arrays
  call torch_tensor_from_array(tensor1, in_data1, tensor_layout, device_type)
  call torch_tensor_from_array(tensor2, in_data2, tensor_layout, device_type)

  ! Create another empty tensor and assign it to the quotient of the first two using the overloaded
  ! division operator
  call torch_tensor_empty(tensor3, ndims, tensor_shape, dtype, device_type)
  tensor3 = tensor1 / tensor2

  ! Extract Fortran array from the assigned tensor
  call torch_tensor_to_array(tensor3, out_data, shape(in_data1))

  ! Compare the data in the tensor to the input data
  expected(:,:) = in_data1 / in_data2
  test_pass = assert_allclose(out_data, expected, test_name="test_torch_tensor_divide")
  @assertTrue(test_pass)
  @assertEqual(shape(expected), shape(out_data))

  ! Cleanup
  nullify(out_data)
  call torch_tensor_delete(tensor1)
  call torch_tensor_delete(tensor2)
  call torch_tensor_delete(tensor3)

end subroutine test_torch_tensor_divide
