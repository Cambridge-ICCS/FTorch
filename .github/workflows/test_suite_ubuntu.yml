# Workflow to run the FTorch test suite
name: TestSuiteUbuntu

# Controls when the workflow will run
on:
  # Triggers the workflow on pushes to the "main" branch, i.e., PR merges
  push:
    branches: [ "main" ]

  # Triggers the workflow on pushes to open pull requests with code changes
  pull_request:
    paths:
      - '.github/workflows/test_suite_ubuntu.yml'
      - '**.c'
      - '**.cpp'
      - '**.fypp'
      - '**.f90'
      - '**.F90'
      - '**.pf'
      - '**.py'
      - '**.sh'
      - '**CMakeLists.txt'
      - '**requirements.txt'
      - '**data/*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Cancel jobs running if new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Workflow run - one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test-suite-ubuntu"
  test-suite-ubuntu:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    fail-fast: false
    matrix:
      std: ["f2008", "f2018"]
      matrix:
        container: ["ghcr.io/cambridge-iccs/ftorch-dev-env:latest"]

    # The Docker container that the job will use
    container:
      image: ${{ matrix.container }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        with:
          persist-credentials: false
        uses: actions/checkout@v4

      - name: Build FTorch
        run: |
          . ftorch/bin/activate
          VN=$(python -c "import sys; print('.'.join(sys.version.split('.')[:2]))")
          export Torch_DIR=${VIRTUAL_ENV}/lib/python${VN}/site-packages
          export BUILD_DIR=$(pwd)/build
          export PFUNIT_DIR="/opt/view/$(ls /opt/view | grep PFUNIT)"
          mkdir ${BUILD_DIR}
          cd ${BUILD_DIR}
          cmake .. \
            -DPython_EXECUTABLE="$(which python)" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${BUILD_DIR} \
            -DCMAKE_BUILD_TESTS=TRUE \
            -DCMAKE_PREFIX_PATH="${PFUNIT_DIR};${Torch_DIR}" \
            -DCMAKE_Fortran_FLAGS="-std=${{ matrix.std }}"
          cmake --build .
          cmake --install .

      - name: Run unit tests
        run: |
          . ftorch/bin/activate
          ./run_test_suite.sh --verbose --unit-only

      - name: Run integration tests
        run: |
          . ftorch/bin/activate
          ./run_test_suite.sh --verbose --integration-only
